name: üöÄ Heneria Nexus CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to server after successful build'
        required: false
        default: false
        type: boolean

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  # Job 1: Analyse statique et validation
  validate-project:
    name: üìä Validation & Analyse
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    
    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üîç D√©tection des changements
      id: changes
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(java|xml|yml|yaml|properties)$'; then
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "üìù Changements d√©tect√©s dans le code source"
        else
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è Aucun changement dans le code source"
        fi

    - name: üè∑Ô∏è Extraction de la version
      id: get-version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìã Version du projet: $VERSION"

    - name: üîç Validation de la structure du projet
      run: |
        echo "üèóÔ∏è Validation de la structure..."
        
        # V√©rifier les fichiers essentiels
        files_to_check=(
          "pom.xml"
          "src/main/java/fr/heneria/nexus/Nexus.java"
          "src/main/resources/plugin.yml"
          "src/main/resources/db/migration"
        )
        
        for file in "${files_to_check[@]}"; do
          if [[ -e "$file" ]]; then
            echo "‚úÖ $file"
          else
            echo "‚ùå $file manquant"
            echo "::error::Fichier manquant: $file"
            exit 1
          fi
        done
    - name: üîß Validation Maven
      run: |
        echo "üîç Validation du projet Maven..."
        mvn validate -B -q
        
        echo ""
        echo "üìä Informations du projet:"
        mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | sed 's/^/  Group ID: /'
        mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout | sed 's/^/  Artifact ID: /'
        mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/^/  Version: /'

    - name: üßπ Analyse des d√©pendances
      run: |
        echo "üîç Analyse des d√©pendances..."
        
        # Cr√©er le rapport de d√©pendances
        mvn dependency:analyze -B -q > dependency-analysis.txt 2>&1 || true
        
        echo "üìä D√©pendances principales:"
        mvn dependency:list -B | grep -E "(mariadb|hikari|triumph|flyway|paper)" | sed 's/^/  /'
        
        echo ""
        echo "‚ö†Ô∏è Alertes potentielles:"
        if grep -E "(WARNING|ERROR)" dependency-analysis.txt; then
          echo "Des alertes ont √©t√© d√©tect√©es dans l'analyse des d√©pendances"
        else
          echo "‚úÖ Aucune alerte d√©tect√©e"
        fi

  # Job 2: Build et packaging
  build:
    name: üî® Build & Package
    runs-on: ubuntu-latest
    needs: validate-project
    if: needs.validate-project.outputs.has-changes == 'true'

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: testpassword123
          MYSQL_DATABASE: nexus_test
          MYSQL_USER: nexus_test
          MYSQL_PASSWORD: nexus_test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    outputs:
      jar-name: ${{ steps.build-info.outputs.jar-name }}
      jar-size: ${{ steps.build-info.outputs.jar-size }}

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üóÉÔ∏è V√©rification de la base de donn√©es
      run: |
        echo "üîç Test de la base de donn√©es de test..."
        
        # Attendre que MariaDB soit pr√™t
        for i in {1..30}; do
          if mysql -h127.0.0.1 -P3306 -uroot -ptestpassword123 -e "SELECT 1;" &>/dev/null; then
            echo "‚úÖ MariaDB est pr√™t"
            break
          fi
          echo "‚è≥ Attente de MariaDB... ($i/30)"
          sleep 2
        done
        
        # V√©rifier la base de test
        mysql -h127.0.0.1 -P3306 -uroot -ptestpassword123 -e "SHOW DATABASES;" | grep nexus_test
        echo "‚úÖ Base de donn√©es nexus_test disponible"

    - name: üîß Compilation
      run: |
        echo "üî® Compilation du projet..."
        mvn clean compile -B -q
        
        if [[ $? -eq 0 ]]; then
          echo "‚úÖ Compilation r√©ussie"
          echo "üìÅ Classes compil√©es:"
          find target/classes -name "*.class" | head -10 | sed 's/^/  /'
        else
          echo "‚ùå √âchec de la compilation"
          exit 1
        fi

    - name: üì¶ Packaging
      id: package
      run: |
        echo "üì¶ Cr√©ation du package..."
        mvn package -B -DskipTests -q
        
        if [[ $? -eq 0 ]]; then
          echo "‚úÖ Packaging r√©ussi"
        else
          echo "‚ùå √âchec du packaging"
          exit 1
        fi

    - name: üîç Analyse du JAR
      id: build-info
      run: |
        echo "üîç Analyse du JAR cr√©√©..."

        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "original-*" | head -1)
        JAR_NAME=$(basename "$JAR_FILE")
        JAR_SIZE=$(ls -lh "$JAR_FILE" | awk '{print $5}')

        echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
        echo "jar-size=$JAR_SIZE" >> $GITHUB_OUTPUT

        echo "üìä Informations du JAR:"
        echo "  üìÅ Nom: $JAR_NAME"
        echo "  üìè Taille: $JAR_SIZE"

        # V√©rifier la taille minimale attendue (doit √™tre > 5MB)
        JAR_SIZE_BYTES=$(stat -c%s "$JAR_FILE")
        MIN_SIZE_BYTES=5242880  # 5MB
        if [[ $JAR_SIZE_BYTES -lt $MIN_SIZE_BYTES ]]; then
            echo "‚ö†Ô∏è ATTENTION: JAR trop petit ($JAR_SIZE), les d√©pendances sont probablement manquantes"
            echo "::warning::JAR size is too small, dependencies might be missing"
        fi

        echo ""
        echo "üß™ V√©rification du contenu:"

        # V√©rifier les fichiers critiques avec une approche plus robuste
        critical_files=(
          "plugin.yml"
          "fr/heneria/nexus/Nexus.class"
          "org/mariadb/jdbc/Driver.class"
          "fr/heneria/nexus/libs/hikari/HikariDataSource.class"
          "fr/heneria/nexus/libs/flywaydb/core/Flyway.class"
        )

        for file in "${critical_files[@]}"; do
          if jar tf "$JAR_FILE" | grep -q "$file"; then
            echo "  ‚úÖ $file"
          else
            echo "  ‚ùå $file manquant"
            echo "::error::Fichier critique manquant dans le JAR: $file"
            exit 1
          fi
        done

        # V√©rification sp√©ciale pour Triumph GUI (recherche dynamique)
        echo ""
        echo "üîç V√©rification de Triumph GUI:"
        GUI_CLASSES=$(jar tf "$JAR_FILE" | grep "fr/heneria/nexus/libs/gui/" | head -3)
        if [ -z "$GUI_CLASSES" ]; then
          echo "  ‚ùå Aucune classe Triumph GUI trouv√©e dans fr/heneria/nexus/libs/gui/"
          echo "::error::Triumph GUI non relocalis√© correctement"
          exit 1
        else
          echo "  ‚úÖ Classes Triumph GUI d√©tect√©es:"
          echo "$GUI_CLASSES" | sed 's/^/    /'

          if jar tf "$JAR_FILE" | grep -q "fr/heneria/nexus/libs/gui.*Gui\\.class"; then
            echo "  ‚úÖ Classe Gui principale trouv√©e"
          else
            echo "  ‚ö†Ô∏è  Aucune classe Gui principale d√©tect√©e, mais d'autres classes GUI sont pr√©sentes"
          fi
        fi

        echo ""
        echo "üìà Analyse d√©taill√©e des d√©pendances relocalis√©es:"

        count_and_display() {
          local pattern="$1"
          local name="$2"
          local count=$(jar tf "$JAR_FILE" | grep -c "$pattern" || echo "0")
          echo "  $name: $count classes"
          if [ "$count" -gt 0 ]; then
            echo "    $(jar tf "$JAR_FILE" | grep "$pattern" | head -2 | sed 's/^/    ‚îú‚îÄ /')"
            if [ "$count" -gt 2 ]; then
              echo "    ‚îî‚îÄ ... et $((count-2)) autres"
            fi
          fi
        }

        count_and_display "org/mariadb/" "MariaDB JDBC"
        count_and_display "fr/heneria/nexus/libs/hikari/" "HikariCP (relocalis√©)"
        count_and_display "fr/heneria/nexus/libs/flywaydb/" "Flyway (relocalis√©)"
        count_and_display "fr/heneria/nexus/libs/gui/" "Triumph GUI (relocalis√©)"

        echo ""
        echo "üîí V√©rification des fuites de relocalisation:"
        LEAKED_CLASSES=""
        for pattern in "com/zaxxer/hikari" "org/flywaydb" "dev/triumphteam/gui"; do
          if jar tf "$JAR_FILE" | grep -q "$pattern"; then
            LEAKED_CLASSES="$LEAKED_CLASSES $pattern"
          fi
        done

        if [ -n "$LEAKED_CLASSES" ]; then
          echo "  ‚ö†Ô∏è  Classes non-relocalis√©es d√©tect√©es: $LEAKED_CLASSES"
          echo "  Cela peut causer des conflits de versions avec d'autres plugins"
        else
          echo "  ‚úÖ Toutes les d√©pendances sont correctement relocalis√©es"
        fi

    - name: üì§ Upload du JAR
      uses: actions/upload-artifact@v4
      with:
        name: nexus-plugin-${{ needs.validate-project.outputs.version }}
        path: target/*.jar
        retention-days: 30

  # Job 3: Tests d'int√©gration complets
  integration-tests:
    name: üß™ Tests d'Int√©gration
    runs-on: ubuntu-latest
    needs: [validate-project, build]
    if: needs.validate-project.outputs.has-changes == 'true'

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: nexus_integration_test
          MYSQL_USER: nexus_user
          MYSQL_PASSWORD: nexus_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üì• T√©l√©chargement du JAR
      uses: actions/download-artifact@v4
      with:
        name: nexus-plugin-${{ needs.validate-project.outputs.version }}
        path: target/

    - name: üöÄ Test de chargement du plugin (Smoke Test)
      run: |
        echo "üöÄ Test de chargement du plugin (Smoke Test):"

        # Cr√©er un test Java adapt√© √† l'environnement CI
        cat > PluginLoadTest.java << 'EOF'
        import java.lang.reflect.Method;
        import java.lang.reflect.Constructor;
        import java.util.jar.JarFile;
        import java.util.jar.JarEntry;
        import java.util.Enumeration;

        public class PluginLoadTest {
            public static void main(String[] args) {
                try {
                    String jarPath = args.length > 0 ? args[0] : "target/Nexus-0.0.0-SNAPSHOT.jar";
                    System.out.println("üîç Test du JAR: " + jarPath);

                    // Test 1: V√©rifier que les d√©pendances relocalis√©es sont chargeable
                    testRelocatedDependencies();

                    // Test 2: V√©rifier l'int√©grit√© du JAR
                    testJarIntegrity(jarPath);

                    // Test 3: V√©rifier les m√©tadonn√©es du plugin
                    testPluginMetadata();

                    // Test 4: V√©rifier les configurations
                    testConfigurations();

                    System.out.println("üéâ Tous les tests de smoke r√©ussis !");

                } catch (Exception e) {
                    System.err.println("‚ùå Erreur lors du smoke test: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }

            private static void testRelocatedDependencies() throws Exception {
                System.out.println("üì¶ Test des d√©pendances relocalis√©es...");

                // Test HikariCP relocalis√©
                Class<?> hikariClass = Class.forName("fr.heneria.nexus.libs.hikari.HikariDataSource");
                Constructor<?> hikariConstructor = hikariClass.getConstructor();
                System.out.println("  ‚úÖ HikariCP relocalis√©: " + hikariClass.getName());

                // Test Flyway relocalis√©
                Class<?> flywayClass = Class.forName("fr.heneria.nexus.libs.flywaydb.core.Flyway");
                Method[] flywayMethods = flywayClass.getDeclaredMethods();
                System.out.println("  ‚úÖ Flyway relocalis√©: " + flywayClass.getName() + " (" + flywayMethods.length + " m√©thodes)");

                // Test Triumph GUI relocalis√© (recherche flexible)
                String[] possibleGuiClasses = {
                    "fr.heneria.nexus.libs.gui.guis.Gui",
                    "fr.heneria.nexus.libs.gui.guis.BaseGui",
                    "fr.heneria.nexus.libs.gui.components.GuiType",
                    "fr.heneria.nexus.libs.gui.GuiAction"
                };

                boolean guiFound = false;
                for (String className : possibleGuiClasses) {
                    try {
                        Class<?> guiClass = Class.forName(className);
                        System.out.println("  ‚úÖ Triumph GUI relocalis√©: " + guiClass.getName());
                        guiFound = true;
                        break;
                    } catch (ClassNotFoundException ignored) {
                        // Essayer la suivante
                    }
                }

                if (!guiFound) {
                    throw new RuntimeException("Aucune classe Triumph GUI relocalis√©e trouv√©e");
                }

                // Test MariaDB (non relocalis√© mais inclus)
                Class<?> mariadbClass = Class.forName("org.mariadb.jdbc.Driver");
                System.out.println("  ‚úÖ MariaDB JDBC: " + mariadbClass.getName());
            }

            private static void testJarIntegrity(String jarPath) throws Exception {
                System.out.println("üîç Test d'int√©grit√© du JAR...");

                try (JarFile jar = new JarFile(jarPath)) {
                    int totalEntries = 0;
                    int classFiles = 0;
                    int relocatedClasses = 0;

                    Enumeration<JarEntry> entries = jar.entries();
                    while (entries.hasMoreElements()) {
                        JarEntry entry = entries.nextElement();
                        totalEntries++;

                        if (entry.getName().endsWith(".class")) {
                            classFiles++;
                            if (entry.getName().startsWith("fr/heneria/nexus/libs/")) {
                                relocatedClasses++;
                            }
                        }
                    }

                    System.out.println("  üìä Statistiques JAR:");
                    System.out.println("    Total entr√©es: " + totalEntries);
                    System.out.println("    Fichiers .class: " + classFiles);
                    System.out.println("    Classes relocalis√©es: " + relocatedClasses);

                    // V√©rifications de sanit√©
                    if (totalEntries < 100) {
                        throw new RuntimeException("JAR trop petit: " + totalEntries + " entr√©es");
                    }
                    if (classFiles < 50) {
                        throw new RuntimeException("Pas assez de classes: " + classFiles);
                    }
                    if (relocatedClasses < 10) {
                        throw new RuntimeException("Pas assez de classes relocalis√©es: " + relocatedClasses);
                    }

                    System.out.println("  ‚úÖ Int√©grit√© du JAR valid√©e");
                }
            }

            private static void testPluginMetadata() throws Exception {
                System.out.println("üìÑ Test des m√©tadonn√©es du plugin...");

                // V√©rifier que plugin.yml est pr√©sent et lisible
                java.io.InputStream pluginYml = PluginLoadTest.class.getClassLoader()
                    .getResourceAsStream("plugin.yml");

                if (pluginYml == null) {
                    throw new RuntimeException("plugin.yml introuvable");
                }

                // Lire le contenu
                String content = new String(pluginYml.readAllBytes());
                pluginYml.close();

                // V√©rifications basiques
                if (!content.contains("name: Nexus")) {
                    throw new RuntimeException("plugin.yml invalide: nom manquant");
                }
                if (!content.contains("main: fr.heneria.nexus.Nexus")) {
                    throw new RuntimeException("plugin.yml invalide: classe principale manquante");
                }
                if (!content.contains("api-version: '1.21'")) {
                    throw new RuntimeException("plugin.yml invalide: version API manquante");
                }

                System.out.println("  ‚úÖ plugin.yml valide");
            }

            private static void testConfigurations() throws Exception {
                System.out.println("‚öôÔ∏è Test des fichiers de configuration...");

                // V√©rifier config.yml
                java.io.InputStream configYml = PluginLoadTest.class.getClassLoader()
                    .getResourceAsStream("config.yml");

                if (configYml == null) {
                    throw new RuntimeException("config.yml introuvable");
                }

                String configContent = new String(configYml.readAllBytes());
                configYml.close();

                // V√©rifications basiques de la configuration
                if (!configContent.contains("database:")) {
                    throw new RuntimeException("config.yml invalide: section database manquante");
                }
                if (!configContent.contains("game:")) {
                    throw new RuntimeException("config.yml invalide: section game manquante");
                }

                System.out.println("  ‚úÖ config.yml valide");

                // V√©rifier les migrations Flyway
                java.io.InputStream migration = PluginLoadTest.class.getClassLoader()
                    .getResourceAsStream("db/migration/V2__create_arena_tables.sql");

                if (migration == null) {
                    throw new RuntimeException("Migration Flyway V2 introuvable");
                }
                migration.close();

                System.out.println("  ‚úÖ Migrations Flyway pr√©sentes");
            }
        }
        EOF

        # Compiler et ex√©cuter le test avec le JAR en argument
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "original-*" | head -1)
        javac PluginLoadTest.java
        java -cp "$JAR_FILE:." PluginLoadTest "$JAR_FILE"

    - name: üéØ Tests de chargement des classes
      run: |
        echo "üß™ Test de chargement des classes critiques..."

        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)

        # Attendre que MariaDB soit compl√®tement pr√™t
        echo "‚è≥ Attente de MariaDB (timeout 60s)..."
        for i in {1..60}; do
          if mysql -h127.0.0.1 -P3306 -unexus_user -pnexus_password nexus_integration_test -e "SELECT 1;" &>/dev/null; then
            echo "‚úÖ MariaDB est pr√™t apr√®s ${i}s"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "‚ùå Timeout MariaDB apr√®s 60s"
            # Diagnostics
            echo "üîç Diagnostics MariaDB:"
            docker ps | grep mariadb || echo "Aucun container MariaDB trouv√©"
            mysql -h127.0.0.1 -P3306 -uroot -ptest_root_password -e "SHOW DATABASES;" 2>&1 || echo "Connexion root √©chou√©e"
            netstat -tlnp | grep 3306 || echo "Port 3306 non ouvert"
            exit 1
          fi
          sleep 1
        done

        # Test avanc√© de connexion avec toutes les configurations possibles
        cat > DatabaseAdvancedTest.java << 'EOF'
        import java.sql.Connection;
        import java.sql.DriverManager;
        import java.sql.Statement;
        import java.sql.ResultSet;
        import java.sql.PreparedStatement;
        import java.util.Properties;

        public class DatabaseAdvancedTest {
            public static void main(String[] args) {
                System.out.println("üîç Tests avanc√©s de base de donn√©es...");

                try {
                    // Test 1: Chargement des drivers
                    System.out.println("üì¶ Test de chargement des drivers JDBC...");
                    Class.forName("org.mariadb.jdbc.Driver");
                    System.out.println("  ‚úÖ Driver MariaDB charg√©");

                    // Test 2: Configuration HikariCP (classes relocalis√©es)
                    System.out.println("üèä Test HikariCP relocalis√©...");
                    Class<?> hikariConfigClass = Class.forName("fr.heneria.nexus.libs.hikari.HikariConfig");
                    Class<?> hikariDataSourceClass = Class.forName("fr.heneria.nexus.libs.hikari.HikariDataSource");

                    Object hikariConfig = hikariConfigClass.getDeclaredConstructor().newInstance();
                    System.out.println("  ‚úÖ HikariConfig instanci√©: " + hikariConfig.getClass().getName());

                    // Test 3: Connexions multiples avec diff√©rentes configurations
                    String[] urls = {
                        "jdbc:mariadb://localhost:3306/nexus_integration_test",
                        "jdbc:mariadb://127.0.0.1:3306/nexus_integration_test",
                        "jdbc:mariadb://localhost:3306/nexus_integration_test?useSSL=false",
                        "jdbc:mariadb://localhost:3306/nexus_integration_test?allowMultiQueries=true"
                    };

                    for (String url : urls) {
                        try {
                            System.out.println("üîó Test connexion: " + url);
                            Connection conn = DriverManager.getConnection(url, "nexus_user", "nexus_password");

                            // Test basique
                            Statement stmt = conn.createStatement();
                            ResultSet rs = stmt.executeQuery("SELECT VERSION() as version, DATABASE() as db");
                            if (rs.next()) {
                                System.out.println("    ‚úÖ Connect√© - Version: " + rs.getString("version") + ", DB: " + rs.getString("db"));
                            }

                            conn.close();
                            break; // Premi√®re connexion r√©ussie

                        } catch (Exception e) {
                            System.out.println("    ‚ùå √âchec: " + e.getMessage());
                        }
                    }

                    // Test 4: Op√©rations de base de donn√©es complexes
                    System.out.println("üóÉÔ∏è  Test d'op√©rations de base de donn√©es...");
                    Connection conn = DriverManager.getConnection(
                        "jdbc:mariadb://localhost:3306/nexus_integration_test",
                        "nexus_user",
                        "nexus_password"
                    );

                    // Cr√©er une table de test
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate("CREATE TABLE IF NOT EXISTS test_advanced (id INT PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)");

                    // Test PreparedStatement
                    PreparedStatement pstmt = conn.prepareStatement("INSERT INTO test_advanced (name) VALUES (?)");
                    pstmt.setString(1, "Test Plugin Nexus");
                    int rows = pstmt.executeUpdate();
                    System.out.println("    ‚úÖ Insertion r√©ussie: " + rows + " ligne(s)");

                    // Test transaction
                    conn.setAutoCommit(false);
                    pstmt.setString(1, "Test Transaction");
                    pstmt.executeUpdate();
                    conn.commit();
                    conn.setAutoCommit(true);
                    System.out.println("    ‚úÖ Transaction r√©ussie");

                    // Test requ√™te complexe
                    ResultSet rs = stmt.executeQuery("SELECT COUNT(*) as count, MAX(created_at) as latest FROM test_advanced");
                    if (rs.next()) {
                        System.out.println("    ‚úÖ Requ√™te complexe: " + rs.getInt("count") + " enregistrements, dernier: " + rs.getTimestamp("latest"));
                    }

                    // Test 5: Flyway relocalis√©
                    System.out.println("üõ´ Test Flyway relocalis√©...");
                    Class<?> flywayClass = Class.forName("fr.heneria.nexus.libs.flywaydb.core.Flyway");
                    System.out.println("    ‚úÖ Flyway relocalis√© charg√©: " + flywayClass.getName());

                    // Nettoyage
                    stmt.executeUpdate("DROP TABLE test_advanced");
                    conn.close();

                    System.out.println("üéâ Tous les tests de base de donn√©es avanc√©s r√©ussis !");

                } catch (Exception e) {
                    System.err.println("‚ùå Erreur dans les tests de base de donn√©es: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }
        EOF

        # Compiler et ex√©cuter avec un timeout
        javac -cp "$JAR_FILE" DatabaseAdvancedTest.java
        timeout 120s java -cp "$JAR_FILE:." DatabaseAdvancedTest || {
            echo "‚ùå Timeout ou erreur dans les tests de base de donn√©es"
            exit 1
        }

    - name: ü©∫ Diagnostics Syst√®me
      run: |
        echo "üñ•Ô∏è  Diagnostics de l'environnement CI..."

        echo "‚òï Version Java:"
        java -version
        javac -version

        echo ""
        echo "üß† M√©moire disponible:"
        free -h || echo "free non disponible"

        echo ""
        echo "üíΩ Espace disque:"
        df -h || echo "df non disponible"

        echo ""
        echo "üêã Services Docker:"
        docker ps

        echo ""
        echo "üåê Connectivit√© r√©seau:"
        ping -c 1 localhost >/dev/null && echo "‚úÖ localhost OK" || echo "‚ùå localhost KO"
        nc -z localhost 3306 && echo "‚úÖ Port 3306 ouvert" || echo "‚ùå Port 3306 ferm√©"

        echo ""
        echo "üì¶ JAR g√©n√©r√©:"
        ls -la target/*.jar 2>/dev/null || echo "Aucun JAR trouv√©"

        echo ""
        echo "üîç Variables d'environnement importantes:"
        echo "JAVA_HOME: ${JAVA_HOME:-non d√©fini}"
        echo "MAVEN_OPTS: ${MAVEN_OPTS:-non d√©fini}"
        echo "PATH: ${PATH}"

    - name: üöÄ Tests de Performance Basic
      run: |
        echo "‚ö° Tests de performance du plugin..."

        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)

        cat > PerformanceTest.java << 'EOF'
        import java.util.concurrent.*;
        import java.sql.*;

        public class PerformanceTest {
            public static void main(String[] args) {
                System.out.println("‚ö° Tests de performance basiques...");

                try {
                    // Test 1: Chargement de classes en parall√®le
                    testParallelClassLoading();

                    // Test 2: Connexions simultan√©es √† la base
                    testConcurrentDatabaseConnections();

                    // Test 3: Performance m√©moire
                    testMemoryUsage();

                    System.out.println("üéâ Tests de performance r√©ussis !");

                } catch (Exception e) {
                    System.err.println("‚ùå Erreur dans les tests de performance: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }

            private static void testParallelClassLoading() throws Exception {
                System.out.println("üîÑ Test de chargement de classes en parall√®le...");

                String[] classes = {
                    "fr.heneria.nexus.libs.hikari.HikariDataSource",
                    "fr.heneria.nexus.libs.flywaydb.core.Flyway",
                    "org.mariadb.jdbc.Driver"
                };

                ExecutorService executor = Executors.newFixedThreadPool(3);
                CompletableFuture<Void>[] futures = new CompletableFuture[classes.length];

                long startTime = System.currentTimeMillis();

                for (int i = 0; i < classes.length; i++) {
                    final String className = classes[i];
                    futures[i] = CompletableFuture.runAsync(() -> {
                        try {
                            Class.forName(className);
                        } catch (Exception e) {
                            throw new RuntimeException("√âchec chargement: " + className, e);
                        }
                    }, executor);
                }

                CompletableFuture.allOf(futures).get(10, TimeUnit.SECONDS);
                long endTime = System.currentTimeMillis();

                executor.shutdown();
                System.out.println("    ‚úÖ Chargement parall√®le r√©ussi en " + (endTime - startTime) + "ms");
            }

            private static void testConcurrentDatabaseConnections() throws Exception {
                System.out.println("üóÉÔ∏è  Test de connexions simultan√©es...");

                String url = "jdbc:mariadb://localhost:3306/nexus_integration_test";
                String username = "nexus_user";
                String password = "nexus_password";

                ExecutorService executor = Executors.newFixedThreadPool(5);
                CompletableFuture<Void>[] futures = new CompletableFuture[5];

                long startTime = System.currentTimeMillis();

                for (int i = 0; i < 5; i++) {
                    final int threadId = i;
                    futures[i] = CompletableFuture.runAsync(() -> {
                        try (Connection conn = DriverManager.getConnection(url, username, password)) {
                            Statement stmt = conn.createStatement();
                            ResultSet rs = stmt.executeQuery("SELECT " + threadId + " as thread_id, NOW() as now");
                            if (rs.next()) {
                                // OK
                            }
                        } catch (Exception e) {
                            throw new RuntimeException("Connexion thread " + threadId + " √©chou√©e", e);
                        }
                    }, executor);
                }

                CompletableFuture.allOf(futures).get(30, TimeUnit.SECONDS);
                long endTime = System.currentTimeMillis();

                executor.shutdown();
                System.out.println("    ‚úÖ Connexions simultan√©es r√©ussies en " + (endTime - startTime) + "ms");
            }

            private static void testMemoryUsage() {
                System.out.println("üß† Test d'utilisation m√©moire...");

                Runtime runtime = Runtime.getRuntime();
                long startMemory = runtime.totalMemory() - runtime.freeMemory();

                // Charger plusieurs fois les classes pour tester les fuites
                for (int i = 0; i < 100; i++) {
                    try {
                        Class.forName("fr.heneria.nexus.libs.hikari.HikariDataSource");
                        Class.forName("fr.heneria.nexus.libs.flywaydb.core.Flyway");
                    } catch (Exception e) {
                        throw new RuntimeException("Erreur chargement classe iteration " + i, e);
                    }
                }

                // Forcer GC
                System.gc();
                Thread.yield();

                long endMemory = runtime.totalMemory() - runtime.freeMemory();
                long memoryIncrease = endMemory - startMemory;

                System.out.println("    üìä M√©moire utilis√©e: " + (memoryIncrease / 1024 / 1024) + " MB");

                if (memoryIncrease > 50 * 1024 * 1024) { // 50MB
                    throw new RuntimeException("Utilisation m√©moire excessive: " + (memoryIncrease / 1024 / 1024) + " MB");
                }

                System.out.println("    ‚úÖ Utilisation m√©moire acceptable");
            }
        }
        EOF

        # Compiler et ex√©cuter avec monitoring m√©moire
        javac -cp "$JAR_FILE" PerformanceTest.java
        java -Xms256m -Xmx512m -cp "$JAR_FILE:." PerformanceTest

  # Job 4: Analyse de s√©curit√©
  security-scan:
    name: üõ°Ô∏è Analyse de S√©curit√©
    runs-on: ubuntu-latest
    needs: [validate-project, build]
    if: needs.validate-project.outputs.has-changes == 'true'
    continue-on-error: true  # Ne pas faire √©chouer le build pour les vuln√©rabilit√©s

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üõ°Ô∏è Scan de s√©curit√© des d√©pendances
      run: |
        echo "üîç Analyse de s√©curit√© des d√©pendances..."
        
        # Installer et ex√©cuter OWASP Dependency Check
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=8 \
          -DsuppressFailureOnError=true \
          -Dformats=ALL \
          -B -q || echo "‚ö†Ô∏è Des vuln√©rabilit√©s ont √©t√© d√©tect√©es"
        
        # Afficher un r√©sum√© si le rapport existe
        if [[ -f target/dependency-check-report.html ]]; then
          echo "üìä Rapport de s√©curit√© g√©n√©r√©"
          if [[ -f target/dependency-check-report.json ]]; then
            echo "üîç Analyse du rapport JSON..."
            # Ici on pourrait parser le JSON pour extraire un r√©sum√©
          fi
        fi

    - name: üì§ Upload rapport de s√©curit√©
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-${{ needs.validate-project.outputs.version }}
        path: target/dependency-check-report.*
        retention-days: 30

  # Job 5: M√©triques et qualit√©
  code-quality:
    name: üìä Qualit√© du Code
    runs-on: ubuntu-latest
    needs: [validate-project]
    if: needs.validate-project.outputs.has-changes == 'true'

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: üìä M√©triques de code
      run: |
        echo "üìà Analyse des m√©triques du code..."
        
        # Comptage des lignes
        total_lines=$(find src -name "*.java" -exec cat {} \; | wc -l)
        java_files=$(find src -name "*.java" | wc -l)
        
        echo "üìè Total lignes de code Java: $total_lines"
        echo "üìÅ Nombre de fichiers Java: $java_files"
        
        if [[ $java_files -gt 0 ]]; then
          avg_lines=$((total_lines / java_files))
          echo "üìä Moyenne lignes par fichier: $avg_lines"
        fi
        
        echo ""
        echo "üèóÔ∏è R√©partition par package:"
        find src -name "*.java" -exec dirname {} \; | sort | uniq -c | sort -nr | head -10
        
        echo ""
        echo "‚ö†Ô∏è Marqueurs de d√©veloppement:"
        grep -r -n "TODO\|FIXME\|XXX" src/ || echo "‚úÖ Aucun marqueur TODO/FIXME trouv√©"

  # Job 6: Rapport final et d√©ploiement conditionnel
  finalize:
    name: üìã Finalisation
    runs-on: ubuntu-latest
    needs: [validate-project, build, integration-tests, security-scan, code-quality]
    if: always()

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: üìä G√©n√©ration du rapport final d√©taill√©
      run: |
        echo "# üéØ Rapport CI/CD Nexus Plugin - D√©taill√©" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Informations de build existantes...

        echo "## üß™ R√©sultats des Tests" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Statut | D√©tails |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| üì¶ Smoke Test | ${{ job.status }} | Classes relocalis√©es charg√©es |" >> $GITHUB_STEP_SUMMARY
        echo "| üóÉÔ∏è Base de Donn√©es | ${{ job.status }} | Connexions et transactions |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö° Performance | ${{ job.status }} | Chargement parall√®le et m√©moire |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # M√©triques de qualit√©
        echo "## üìä M√©triques de Qualit√©" >> $GITHUB_STEP_SUMMARY
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        if [ -f "$JAR_FILE" ]; then
          JAR_SIZE=$(ls -lh "$JAR_FILE" | awk '{print $5}')
          CLASS_COUNT=$(jar tf "$JAR_FILE" | grep "\.class$" | wc -l)
          RELOCATED_COUNT=$(jar tf "$JAR_FILE" | grep "fr/heneria/nexus/libs/" | wc -l)

          echo "- **Taille JAR**: $JAR_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Nombre de classes**: $CLASS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Classes relocalis√©es**: $RELOCATED_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Ratio relocalisation**: $(( RELOCATED_COUNT * 100 / CLASS_COUNT ))%" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîß Recommandations" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.validate-project.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ **Build Production Ready** - Tous les tests critiques passent" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Prochaines √©tapes sugg√©r√©es:" >> $GITHUB_STEP_SUMMARY
          echo "1. D√©ployer sur le serveur de test" >> $GITHUB_STEP_SUMMARY
          echo "2. Tests d'int√©gration avec vrais joueurs" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitoring des performances en production" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è  **Corrections N√©cessaires** - Voir les logs ci-dessus" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Rapport g√©n√©r√© automatiquement le $(date) par Heneria CI/CD*" >> $GITHUB_STEP_SUMMARY

    - name: üöÄ Notification de d√©ploiement (si succ√®s)
      if: >
        needs.validate-project.result == 'success' &&
        needs.build.result == 'success' &&
        needs.integration-tests.result == 'success' &&
        github.event.inputs.deploy == 'true'
      run: |
        echo "üöÄ Le plugin est pr√™t pour le d√©ploiement !"
        echo "üì¶ Artifact: ${{ needs.build.outputs.jar-name }}"
        echo "üíæ Taille: ${{ needs.build.outputs.jar-size }}"
        echo ""
        echo "Pour d√©ployer manuellement:"
        echo "1. T√©l√©charger l'artifact depuis cette action"
        echo "2. L'uploader sur le serveur avec WinSCP ou le script deploy.sh"
        echo "3. Red√©marrer le serveur Minecraft"

