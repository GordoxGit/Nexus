name: üöÄ Heneria Nexus CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to server after successful build'
        required: false
        default: false
        type: boolean

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  # Job 1: Analyse statique et validation
  validate-project:
    name: üìä Validation & Analyse
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    
    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üîç D√©tection des changements
      id: changes
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(java|xml|yml|yaml|properties)$'; then
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "üìù Changements d√©tect√©s dans le code source"
        else
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è Aucun changement dans le code source"
        fi

    - name: üè∑Ô∏è Extraction de la version
      id: get-version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "üìã Version du projet: $VERSION"

    - name: üîç Validation de la structure du projet
      run: |
        echo "üèóÔ∏è Validation de la structure..."
        
        # V√©rifier les fichiers essentiels
        files_to_check=(
          "pom.xml"
          "src/main/java/fr/heneria/nexus/Nexus.java"
          "src/main/resources/plugin.yml"
          "src/main/resources/db/migration"
        )
        
        for file in "${files_to_check[@]}"; do
          if [[ -e "$file" ]]; then
            echo "‚úÖ $file"
          else
            echo "‚ùå $file manquant"
            echo "::error::Fichier manquant: $file"
            exit 1
          fi
        done
    - name: üîß Validation Maven
      run: |
        echo "üîç Validation du projet Maven..."
        mvn validate -B -q
        
        echo ""
        echo "üìä Informations du projet:"
        mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | sed 's/^/  Group ID: /'
        mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout | sed 's/^/  Artifact ID: /'
        mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/^/  Version: /'

    - name: üßπ Analyse des d√©pendances
      run: |
        echo "üîç Analyse des d√©pendances..."
        
        # Cr√©er le rapport de d√©pendances
        mvn dependency:analyze -B -q > dependency-analysis.txt 2>&1 || true
        
        echo "üìä D√©pendances principales:"
        mvn dependency:list -B | grep -E "(mariadb|hikari|triumph|flyway|paper)" | sed 's/^/  /'
        
        echo ""
        echo "‚ö†Ô∏è Alertes potentielles:"
        if grep -E "(WARNING|ERROR)" dependency-analysis.txt; then
          echo "Des alertes ont √©t√© d√©tect√©es dans l'analyse des d√©pendances"
        else
          echo "‚úÖ Aucune alerte d√©tect√©e"
        fi

  # Job 2: Build et packaging
  build:
    name: üî® Build & Package
    runs-on: ubuntu-latest
    needs: validate-project
    if: needs.validate-project.outputs.has-changes == 'true'

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: testpassword123
          MYSQL_DATABASE: nexus_test
          MYSQL_USER: nexus_test
          MYSQL_PASSWORD: nexus_test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    outputs:
      jar-name: ${{ steps.build-info.outputs.jar-name }}
      jar-size: ${{ steps.build-info.outputs.jar-size }}

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üóÉÔ∏è V√©rification de la base de donn√©es
      run: |
        echo "üîç Test de la base de donn√©es de test..."
        
        # Attendre que MariaDB soit pr√™t
        for i in {1..30}; do
          if mysql -h127.0.0.1 -P3306 -uroot -ptestpassword123 -e "SELECT 1;" &>/dev/null; then
            echo "‚úÖ MariaDB est pr√™t"
            break
          fi
          echo "‚è≥ Attente de MariaDB... ($i/30)"
          sleep 2
        done
        
        # V√©rifier la base de test
        mysql -h127.0.0.1 -P3306 -uroot -ptestpassword123 -e "SHOW DATABASES;" | grep nexus_test
        echo "‚úÖ Base de donn√©es nexus_test disponible"

    - name: üîß Compilation
      run: |
        echo "üî® Compilation du projet..."
        mvn clean compile -B -q
        
        if [[ $? -eq 0 ]]; then
          echo "‚úÖ Compilation r√©ussie"
          echo "üìÅ Classes compil√©es:"
          find target/classes -name "*.class" | head -10 | sed 's/^/  /'
        else
          echo "‚ùå √âchec de la compilation"
          exit 1
        fi

    - name: üì¶ Packaging
      id: package
      run: |
        echo "üì¶ Cr√©ation du package..."
        mvn package -B -DskipTests -q
        
        if [[ $? -eq 0 ]]; then
          echo "‚úÖ Packaging r√©ussi"
        else
          echo "‚ùå √âchec du packaging"
          exit 1
        fi

    - name: üîç Analyse du JAR
      id: build-info
      run: |
        echo "üîç Analyse du JAR cr√©√©..."

        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "original-*" | head -1)
        JAR_NAME=$(basename "$JAR_FILE")
        JAR_SIZE=$(ls -lh "$JAR_FILE" | awk '{print $5}')

        echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
        echo "jar-size=$JAR_SIZE" >> $GITHUB_OUTPUT

        echo "üìä Informations du JAR:"
        echo "  üìÅ Nom: $JAR_NAME"
        echo "  üìè Taille: $JAR_SIZE"

        # V√©rifier la taille minimale attendue (doit √™tre > 5MB)
        JAR_SIZE_BYTES=$(stat -c%s "$JAR_FILE")
        MIN_SIZE_BYTES=5242880  # 5MB
        if [[ $JAR_SIZE_BYTES -lt $MIN_SIZE_BYTES ]]; then
            echo "‚ö†Ô∏è ATTENTION: JAR trop petit ($JAR_SIZE), les d√©pendances sont probablement manquantes"
            echo "::warning::JAR size is too small, dependencies might be missing"
        fi

        echo ""
        echo "üß™ V√©rification du contenu:"

        # V√©rifier les fichiers critiques avec une approche plus robuste
        critical_files=(
          "plugin.yml"
          "fr/heneria/nexus/Nexus.class"
          "org/mariadb/jdbc/Driver.class"
          "fr/heneria/nexus/libs/hikari/HikariDataSource.class"
          "fr/heneria/nexus/libs/flywaydb/core/Flyway.class"
        )

        for file in "${critical_files[@]}"; do
          if jar tf "$JAR_FILE" | grep -q "$file"; then
            echo "  ‚úÖ $file"
          else
            echo "  ‚ùå $file manquant"
            echo "::error::Fichier critique manquant dans le JAR: $file"
            exit 1
          fi
        done

        # V√©rification sp√©ciale pour Triumph GUI (recherche dynamique)
        echo ""
        echo "üîç V√©rification de Triumph GUI:"
        GUI_CLASSES=$(jar tf "$JAR_FILE" | grep "fr/heneria/nexus/libs/gui/" | head -3)
        if [ -z "$GUI_CLASSES" ]; then
          echo "  ‚ùå Aucune classe Triumph GUI trouv√©e dans fr/heneria/nexus/libs/gui/"
          echo "::error::Triumph GUI non relocalis√© correctement"
          exit 1
        else
          echo "  ‚úÖ Classes Triumph GUI d√©tect√©es:"
          echo "$GUI_CLASSES" | sed 's/^/    /'

          if jar tf "$JAR_FILE" | grep -q "fr/heneria/nexus/libs/gui.*Gui\\.class"; then
            echo "  ‚úÖ Classe Gui principale trouv√©e"
          else
            echo "  ‚ö†Ô∏è  Aucune classe Gui principale d√©tect√©e, mais d'autres classes GUI sont pr√©sentes"
          fi
        fi

        echo ""
        echo "üìà Analyse d√©taill√©e des d√©pendances relocalis√©es:"

        count_and_display() {
          local pattern="$1"
          local name="$2"
          local count=$(jar tf "$JAR_FILE" | grep -c "$pattern" || echo "0")
          echo "  $name: $count classes"
          if [ "$count" -gt 0 ]; then
            echo "    $(jar tf "$JAR_FILE" | grep "$pattern" | head -2 | sed 's/^/    ‚îú‚îÄ /')"
            if [ "$count" -gt 2 ]; then
              echo "    ‚îî‚îÄ ... et $((count-2)) autres"
            fi
          fi
        }

        count_and_display "org/mariadb/" "MariaDB JDBC"
        count_and_display "fr/heneria/nexus/libs/hikari/" "HikariCP (relocalis√©)"
        count_and_display "fr/heneria/nexus/libs/flywaydb/" "Flyway (relocalis√©)"
        count_and_display "fr/heneria/nexus/libs/gui/" "Triumph GUI (relocalis√©)"

        echo ""
        echo "üîí V√©rification des fuites de relocalisation:"
        LEAKED_CLASSES=""
        for pattern in "com/zaxxer/hikari" "org/flywaydb" "dev/triumphteam/gui"; do
          if jar tf "$JAR_FILE" | grep -q "$pattern"; then
            LEAKED_CLASSES="$LEAKED_CLASSES $pattern"
          fi
        done

        if [ -n "$LEAKED_CLASSES" ]; then
          echo "  ‚ö†Ô∏è  Classes non-relocalis√©es d√©tect√©es: $LEAKED_CLASSES"
          echo "  Cela peut causer des conflits de versions avec d'autres plugins"
        else
          echo "  ‚úÖ Toutes les d√©pendances sont correctement relocalis√©es"
        fi

    - name: üì§ Upload du JAR
      uses: actions/upload-artifact@v4
      with:
        name: nexus-plugin-${{ needs.validate-project.outputs.version }}
        path: target/*.jar
        retention-days: 30

  # Job 3: Tests d'int√©gration complets
  integration-tests:
    name: üß™ Tests d'Int√©gration
    runs-on: ubuntu-latest
    needs: [validate-project, build]
    if: needs.validate-project.outputs.has-changes == 'true'

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: nexus_integration_test
          MYSQL_USER: nexus_user
          MYSQL_PASSWORD: nexus_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üì• T√©l√©chargement du JAR
      uses: actions/download-artifact@v4
      with:
        name: nexus-plugin-${{ needs.validate-project.outputs.version }}
        path: target/

    - name: üöÄ Test de chargement du plugin (Smoke Test)
      run: |
        echo "üöÄ Test de chargement du plugin (Smoke Test):"
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        cat > PluginLoadTest.java << 'EOF'
        import java.lang.reflect.Method;

        public class PluginLoadTest {
            public static void main(String[] args) {
                try {
                    Class<?> nexusClass = Class.forName("fr.heneria.nexus.Nexus");
                    System.out.println("‚úÖ Classe Nexus charg√©e: " + nexusClass.getName());

                    Class<?> hikariClass = Class.forName("fr.heneria.nexus.libs.hikari.HikariDataSource");
                    System.out.println("‚úÖ HikariCP relocalis√© charg√©: " + hikariClass.getName());

                    Class<?> flywayClass = Class.forName("fr.heneria.nexus.libs.flywaydb.core.Flyway");
                    System.out.println("‚úÖ Flyway relocalis√© charg√©: " + flywayClass.getName());

                    String[] possibleClasses = {
                        "fr.heneria.nexus.libs.gui.guis.Gui",
                        "fr.heneria.nexus.libs.gui.guis.BaseGui",
                        "fr.heneria.nexus.libs.gui.components.GuiType"
                    };

                    boolean guiFound = false;
                    for (String className : possibleClasses) {
                        try {
                            Class<?> guiClass = Class.forName(className);
                            System.out.println("‚úÖ Triumph GUI relocalis√© charg√©: " + guiClass.getName());
                            guiFound = true;
                            break;
                        } catch (ClassNotFoundException ignored) {}
                    }

                    if (!guiFound) {
                        System.err.println("‚ùå Aucune classe Triumph GUI trouv√©e");
                        System.exit(1);
                    }

                    System.out.println("üéâ Tous les tests de chargement de classes r√©ussis !");

                } catch (Exception e) {
                    System.err.println("‚ùå Erreur lors du test de chargement: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }
        EOF
        javac -cp "$JAR_FILE" PluginLoadTest.java
        java -cp "$JAR_FILE:." PluginLoadTest

    - name: üéØ Tests de chargement des classes
      run: |
        echo "üß™ Test de chargement des classes critiques..."
        
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        
        # Cr√©er un test Java complet
        cat > DatabaseConnectionTest.java << 'EOF'
        import java.sql.Connection;
        import java.sql.DriverManager;
        import java.sql.Statement;
        import java.sql.ResultSet;
        import com.zaxxer.hikari.HikariConfig;

        public class DatabaseConnectionTest {
            public static void main(String[] args) {
                System.out.println("üîç Test de chargement du driver MariaDB...");

                try {
                    // Test 1: Chargement du driver
                    Class.forName("org.mariadb.jdbc.Driver");
                    System.out.println("‚úÖ Driver MariaDB charg√© avec succ√®s");

                    String url = "jdbc:mariadb://localhost:3306/nexus_integration_test";
                    String username = "nexus_user";
                    String password = "nexus_password";

                    // Test 2: V√©rification des classes HikariCP
                    HikariConfig config = new HikariConfig();
                    config.setJdbcUrl(url);
                    config.setUsername(username);
                    config.setPassword(password);
                    System.out.println("‚úÖ HikariCP disponible dans le JAR");

                    // Test 3: Connexion √† la base
                    System.out.println("üîó Test de connexion √† la base...");
                    Connection conn = DriverManager.getConnection(url, username, password);
                    System.out.println("‚úÖ Connexion √©tablie avec succ√®s");

                    // Test 4: Op√©ration basique
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT VERSION() as version");
                    if (rs.next()) {
                        System.out.println("üìã Version MariaDB: " + rs.getString("version"));
                    }

                    // Test 5: Cr√©ation de table (simulation Flyway)
                    stmt.executeUpdate("CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(255))");
                    stmt.executeUpdate("INSERT INTO test_table (id, name) VALUES (1, 'Test Plugin') ON DUPLICATE KEY UPDATE name = VALUES(name)");

                    ResultSet testRs = stmt.executeQuery("SELECT name FROM test_table WHERE id = 1");
                    if (testRs.next()) {
                        System.out.println("‚úÖ Test CRUD r√©ussi: " + testRs.getString("name"));
                    }

                    // Nettoyage
                    stmt.executeUpdate("DROP TABLE test_table");
                    conn.close();

                    System.out.println("üéâ Tous les tests d'int√©gration r√©ussis !");

                } catch (Exception e) {
                    System.err.println("‚ùå Erreur dans les tests: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }
        EOF
        
        # Attendre que MariaDB soit pr√™t
        echo "‚è≥ Attente de MariaDB..."
        for i in {1..30}; do
          if mysql -h127.0.0.1 -P3306 -unexus_user -pnexus_password -e "SELECT 1;" &>/dev/null; then
            echo "‚úÖ MariaDB est pr√™t pour les tests"
            break
          fi
          sleep 2
        done
        
        # Compiler et ex√©cuter le test
        javac -cp "$JAR_FILE" DatabaseConnectionTest.java
        java -cp "$JAR_FILE:." DatabaseConnectionTest

    - name: üß™ Test de simulation Flyway
      run: |
        echo "üß™ Test de simulation des migrations Flyway..."
        
        # V√©rifier que Flyway est bien inclus
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        if jar tf "$JAR_FILE" | grep -q "org/flywaydb"; then
          echo "‚úÖ Flyway d√©tect√© dans le JAR"
        else
          echo "‚ùå Flyway non trouv√© dans le JAR"
          exit 1
        fi

  # Job 4: Analyse de s√©curit√©
  security-scan:
    name: üõ°Ô∏è Analyse de S√©curit√©
    runs-on: ubuntu-latest
    needs: [validate-project, build]
    if: needs.validate-project.outputs.has-changes == 'true'
    continue-on-error: true  # Ne pas faire √©chouer le build pour les vuln√©rabilit√©s

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: ‚òï Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: üõ°Ô∏è Scan de s√©curit√© des d√©pendances
      run: |
        echo "üîç Analyse de s√©curit√© des d√©pendances..."
        
        # Installer et ex√©cuter OWASP Dependency Check
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=8 \
          -DsuppressFailureOnError=true \
          -Dformats=ALL \
          -B -q || echo "‚ö†Ô∏è Des vuln√©rabilit√©s ont √©t√© d√©tect√©es"
        
        # Afficher un r√©sum√© si le rapport existe
        if [[ -f target/dependency-check-report.html ]]; then
          echo "üìä Rapport de s√©curit√© g√©n√©r√©"
          if [[ -f target/dependency-check-report.json ]]; then
            echo "üîç Analyse du rapport JSON..."
            # Ici on pourrait parser le JSON pour extraire un r√©sum√©
          fi
        fi

    - name: üì§ Upload rapport de s√©curit√©
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-${{ needs.validate-project.outputs.version }}
        path: target/dependency-check-report.*
        retention-days: 30

  # Job 5: M√©triques et qualit√©
  code-quality:
    name: üìä Qualit√© du Code
    runs-on: ubuntu-latest
    needs: [validate-project]
    if: needs.validate-project.outputs.has-changes == 'true'

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: üìä M√©triques de code
      run: |
        echo "üìà Analyse des m√©triques du code..."
        
        # Comptage des lignes
        total_lines=$(find src -name "*.java" -exec cat {} \; | wc -l)
        java_files=$(find src -name "*.java" | wc -l)
        
        echo "üìè Total lignes de code Java: $total_lines"
        echo "üìÅ Nombre de fichiers Java: $java_files"
        
        if [[ $java_files -gt 0 ]]; then
          avg_lines=$((total_lines / java_files))
          echo "üìä Moyenne lignes par fichier: $avg_lines"
        fi
        
        echo ""
        echo "üèóÔ∏è R√©partition par package:"
        find src -name "*.java" -exec dirname {} \; | sort | uniq -c | sort -nr | head -10
        
        echo ""
        echo "‚ö†Ô∏è Marqueurs de d√©veloppement:"
        grep -r -n "TODO\|FIXME\|XXX" src/ || echo "‚úÖ Aucun marqueur TODO/FIXME trouv√©"

  # Job 6: Rapport final et d√©ploiement conditionnel
  finalize:
    name: üìã Finalisation
    runs-on: ubuntu-latest
    needs: [validate-project, build, integration-tests, security-scan, code-quality]
    if: always()

    steps:
    - name: üîÑ Checkout du code
      uses: actions/checkout@v4

    - name: üìä G√©n√©ration du rapport final
      run: |
        echo "# üéØ Rapport CI/CD Nexus Plugin" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## üìã Informations du Build" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${GITHUB_SHA:0:8}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branche**: ${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
        echo "- **JAR**: ${{ needs.build.outputs.jar-name || 'Non g√©n√©r√©' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Taille**: ${{ needs.build.outputs.jar-size || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## üéØ R√©sultats des Jobs" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Statut |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| üìä Validation | ${{ needs.validate-project.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üî® Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üß™ Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üõ°Ô∏è S√©curit√© | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| üìä Qualit√© | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # D√©terminer le statut global
        if [[ "${{ needs.validate-project.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "## üéâ Build R√©ussi !" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Le plugin a pass√© tous les tests critiques et est pr√™t pour le d√©ploiement." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì• T√©l√©chargement" >> $GITHUB_STEP_SUMMARY
          echo "Le JAR compil√© est disponible dans les artifacts de ce build." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ‚ùå Build √âchou√©" >> $GITHUB_STEP_SUMMARY
          echo "üîç V√©rifiez les logs des jobs √©chou√©s pour plus de d√©tails." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*G√©n√©r√© automatiquement par Heneria CI/CD*" >> $GITHUB_STEP_SUMMARY

    - name: üöÄ Notification de d√©ploiement (si succ√®s)
      if: >
        needs.validate-project.result == 'success' &&
        needs.build.result == 'success' &&
        needs.integration-tests.result == 'success' &&
        github.event.inputs.deploy == 'true'
      run: |
        echo "üöÄ Le plugin est pr√™t pour le d√©ploiement !"
        echo "üì¶ Artifact: ${{ needs.build.outputs.jar-name }}"
        echo "üíæ Taille: ${{ needs.build.outputs.jar-size }}"
        echo ""
        echo "Pour d√©ployer manuellement:"
        echo "1. T√©l√©charger l'artifact depuis cette action"
        echo "2. L'uploader sur le serveur avec WinSCP ou le script deploy.sh"
        echo "3. Red√©marrer le serveur Minecraft"

