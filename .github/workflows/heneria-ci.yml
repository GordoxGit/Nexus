name: 🚀 Heneria Nexus CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to server after successful build'
        required: false
        default: false
        type: boolean

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.httpconnectionManager.ttlSeconds=120

jobs:
  # Job 1: Analyse statique et validation
  validate-project:
    name: 📊 Validation & Analyse
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    
    steps:
    - name: 🔄 Checkout du code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: 🔍 Détection des changements
      id: changes
      run: |
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(java|xml|yml|yaml|properties)$'; then
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "📝 Changements détectés dans le code source"
        else
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "ℹ️ Aucun changement dans le code source"
        fi

    - name: 🏷️ Extraction de la version
      id: get-version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 Version du projet: $VERSION"

    - name: 🔍 Validation de la structure du projet
      run: |
        echo "🏗️ Validation de la structure..."
        
        # Vérifier les fichiers essentiels
        files_to_check=(
          "pom.xml"
          "src/main/java/fr/heneria/nexus/Nexus.java"
          "src/main/resources/plugin.yml"
          "src/main/resources/db/migration"
        )
        
        for file in "${files_to_check[@]}"; do
          if [[ -e "$file" ]]; then
            echo "✅ $file"
          else
            echo "❌ $file manquant"
            echo "::error::Fichier manquant: $file"
            exit 1
          fi
        done
    - name: 🔧 Validation Maven
      run: |
        echo "🔍 Validation du projet Maven..."
        mvn validate -B -q
        
        echo ""
        echo "📊 Informations du projet:"
        mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout | sed 's/^/  Group ID: /'
        mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout | sed 's/^/  Artifact ID: /'
        mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/^/  Version: /'

    - name: 🧹 Analyse des dépendances
      run: |
        echo "🔍 Analyse des dépendances..."
        
        # Créer le rapport de dépendances
        mvn dependency:analyze -B -q > dependency-analysis.txt 2>&1 || true
        
        echo "📊 Dépendances principales:"
        mvn dependency:list -B | grep -E "(mariadb|hikari|triumph|flyway|paper)" | sed 's/^/  /'
        
        echo ""
        echo "⚠️ Alertes potentielles:"
        if grep -E "(WARNING|ERROR)" dependency-analysis.txt; then
          echo "Des alertes ont été détectées dans l'analyse des dépendances"
        else
          echo "✅ Aucune alerte détectée"
        fi

  # Job 2: Build et packaging
  build:
    name: 🔨 Build & Package
    runs-on: ubuntu-latest
    needs: validate-project
    if: needs.validate-project.outputs.has-changes == 'true'

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: testpassword123
          MYSQL_DATABASE: nexus_test
          MYSQL_USER: nexus_test
          MYSQL_PASSWORD: nexus_test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    outputs:
      jar-name: ${{ steps.build-info.outputs.jar-name }}
      jar-size: ${{ steps.build-info.outputs.jar-size }}

    steps:
    - name: 🔄 Checkout du code
      uses: actions/checkout@v4

    - name: ☕ Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: 🗃️ Vérification de la base de données
      run: |
        echo "🔍 Test de la base de données de test..."
        
        # Attendre que MariaDB soit prêt
        for i in {1..30}; do
          if mysql -h127.0.0.1 -P3306 -uroot -ptestpassword123 -e "SELECT 1;" &>/dev/null; then
            echo "✅ MariaDB est prêt"
            break
          fi
          echo "⏳ Attente de MariaDB... ($i/30)"
          sleep 2
        done
        
        # Vérifier la base de test
        mysql -h127.0.0.1 -P3306 -uroot -ptestpassword123 -e "SHOW DATABASES;" | grep nexus_test
        echo "✅ Base de données nexus_test disponible"

    - name: 🔧 Compilation
      run: |
        echo "🔨 Compilation du projet..."
        mvn clean compile -B -q
        
        if [[ $? -eq 0 ]]; then
          echo "✅ Compilation réussie"
          echo "📁 Classes compilées:"
          find target/classes -name "*.class" | head -10 | sed 's/^/  /'
        else
          echo "❌ Échec de la compilation"
          exit 1
        fi

    - name: 📦 Packaging
      id: package
      run: |
        echo "📦 Création du package..."
        mvn package -B -DskipTests -q
        
        if [[ $? -eq 0 ]]; then
          echo "✅ Packaging réussi"
        else
          echo "❌ Échec du packaging"
          exit 1
        fi

    - name: 🔍 Analyse du JAR
      id: build-info
      run: |
        echo "🔍 Analyse du JAR créé..."
        
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        JAR_NAME=$(basename "$JAR_FILE")
        JAR_SIZE=$(ls -lh "$JAR_FILE" | awk '{print $5}')
        
        echo "jar-name=$JAR_NAME" >> $GITHUB_OUTPUT
        echo "jar-size=$JAR_SIZE" >> $GITHUB_OUTPUT
        
        echo "📊 Informations du JAR:"
        echo "  📁 Nom: $JAR_NAME"
        echo "  📏 Taille: $JAR_SIZE"
        
        echo ""
        echo "🧪 Vérification du contenu:"
        
        # Vérifier les fichiers critiques
        critical_files=(
          "plugin.yml"
          "fr/heneria/nexus/Nexus.class"
          "org/mariadb/jdbc/Driver.class"
        )
        
        for file in "${critical_files[@]}"; do
          if jar tf "$JAR_FILE" | grep -q "$file"; then
            echo "  ✅ $file"
          else
            echo "  ❌ $file manquant"
            echo "::error::Fichier critique manquant dans le JAR: $file"
            exit 1
          fi
        done
        
        echo ""
        echo "🔧 Classes relocalisées:"
        jar tf "$JAR_FILE" | grep -E "fr/heneria/nexus/libs/" | head -5 | sed 's/^/  /' || echo "  ℹ️ Aucune relocalisation détectée"

    - name: 📤 Upload du JAR
      uses: actions/upload-artifact@v4
      with:
        name: nexus-plugin-${{ needs.validate-project.outputs.version }}
        path: target/*.jar
        retention-days: 30

  # Job 3: Tests d'intégration complets
  integration-tests:
    name: 🧪 Tests d'Intégration
    runs-on: ubuntu-latest
    needs: [validate-project, build]
    if: needs.validate-project.outputs.has-changes == 'true'

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: nexus_integration_test
          MYSQL_USER: nexus_user
          MYSQL_PASSWORD: nexus_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: 🔄 Checkout du code
      uses: actions/checkout@v4

    - name: ☕ Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: 📥 Téléchargement du JAR
      uses: actions/download-artifact@v4
      with:
        name: nexus-plugin-${{ needs.validate-project.outputs.version }}
        path: target/

    - name: 🎯 Tests de chargement des classes
      run: |
        echo "🧪 Test de chargement des classes critiques..."
        
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        
        # Créer un test Java complet
        cat > DatabaseConnectionTest.java << 'EOF'
        import java.sql.Connection;
        import java.sql.DriverManager;
        import java.sql.Statement;
        import java.sql.ResultSet;
        
        public class DatabaseConnectionTest {
            public static void main(String[] args) {
                System.out.println("🔍 Test de chargement du driver MariaDB...");
                
                try {
                    // Test 1: Chargement du driver
                    Class.forName("org.mariadb.jdbc.Driver");
                    System.out.println("✅ Driver MariaDB chargé avec succès");
                    
                    // Test 2: Connexion à la base
                    System.out.println("🔗 Test de connexion à la base...");
                    String url = "jdbc:mariadb://localhost:3306/nexus_integration_test";
                    String username = "nexus_user";
                    String password = "nexus_password";
                    
                    Connection conn = DriverManager.getConnection(url, username, password);
                    System.out.println("✅ Connexion établie avec succès");
                    
                    // Test 3: Opération basique
                    Statement stmt = conn.createStatement();
                    ResultSet rs = stmt.executeQuery("SELECT VERSION() as version");
                    if (rs.next()) {
                        System.out.println("📋 Version MariaDB: " + rs.getString("version"));
                    }
                    
                    // Test 4: Création de table (simulation Flyway)
                    stmt.executeUpdate("CREATE TABLE IF NOT EXISTS test_table (id INT PRIMARY KEY, name VARCHAR(255))");
                    stmt.executeUpdate("INSERT INTO test_table (id, name) VALUES (1, 'Test Plugin') ON DUPLICATE KEY UPDATE name = VALUES(name)");
                    
                    ResultSet testRs = stmt.executeQuery("SELECT name FROM test_table WHERE id = 1");
                    if (testRs.next()) {
                        System.out.println("✅ Test CRUD réussi: " + testRs.getString("name"));
                    }
                    
                    // Nettoyage
                    stmt.executeUpdate("DROP TABLE test_table");
                    conn.close();
                    
                    System.out.println("🎉 Tous les tests d'intégration réussis !");
                    
                } catch (Exception e) {
                    System.err.println("❌ Erreur dans les tests: " + e.getMessage());
                    e.printStackTrace();
                    System.exit(1);
                }
            }
        }
        EOF
        
        # Attendre que MariaDB soit prêt
        echo "⏳ Attente de MariaDB..."
        for i in {1..30}; do
          if mysql -h127.0.0.1 -P3306 -unexus_user -pnexus_password -e "SELECT 1;" &>/dev/null; then
            echo "✅ MariaDB est prêt pour les tests"
            break
          fi
          sleep 2
        done
        
        # Compiler et exécuter le test
        javac -cp "$JAR_FILE" DatabaseConnectionTest.java
        java -cp "$JAR_FILE:." DatabaseConnectionTest

    - name: 🧪 Test de simulation Flyway
      run: |
        echo "🧪 Test de simulation des migrations Flyway..."
        
        # Vérifier que Flyway est bien inclus
        JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" | head -1)
        if jar tf "$JAR_FILE" | grep -q "org/flywaydb"; then
          echo "✅ Flyway détecté dans le JAR"
        else
          echo "❌ Flyway non trouvé dans le JAR"
          exit 1
        fi

  # Job 4: Analyse de sécurité
  security-scan:
    name: 🛡️ Analyse de Sécurité
    runs-on: ubuntu-latest
    needs: [validate-project, build]
    if: needs.validate-project.outputs.has-changes == 'true'
    continue-on-error: true  # Ne pas faire échouer le build pour les vulnérabilités

    steps:
    - name: 🔄 Checkout du code
      uses: actions/checkout@v4

    - name: ☕ Configuration Java 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        cache: maven

    - name: 🛡️ Scan de sécurité des dépendances
      run: |
        echo "🔍 Analyse de sécurité des dépendances..."
        
        # Installer et exécuter OWASP Dependency Check
        mvn org.owasp:dependency-check-maven:check \
          -DfailBuildOnCVSS=8 \
          -DsuppressFailureOnError=true \
          -Dformats=ALL \
          -B -q || echo "⚠️ Des vulnérabilités ont été détectées"
        
        # Afficher un résumé si le rapport existe
        if [[ -f target/dependency-check-report.html ]]; then
          echo "📊 Rapport de sécurité généré"
          if [[ -f target/dependency-check-report.json ]]; then
            echo "🔍 Analyse du rapport JSON..."
            # Ici on pourrait parser le JSON pour extraire un résumé
          fi
        fi

    - name: 📤 Upload rapport de sécurité
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report-${{ needs.validate-project.outputs.version }}
        path: target/dependency-check-report.*
        retention-days: 30

  # Job 5: Métriques et qualité
  code-quality:
    name: 📊 Qualité du Code
    runs-on: ubuntu-latest
    needs: [validate-project]
    if: needs.validate-project.outputs.has-changes == 'true'

    steps:
    - name: 🔄 Checkout du code
      uses: actions/checkout@v4

    - name: 📊 Métriques de code
      run: |
        echo "📈 Analyse des métriques du code..."
        
        # Comptage des lignes
        total_lines=$(find src -name "*.java" -exec cat {} \; | wc -l)
        java_files=$(find src -name "*.java" | wc -l)
        
        echo "📏 Total lignes de code Java: $total_lines"
        echo "📁 Nombre de fichiers Java: $java_files"
        
        if [[ $java_files -gt 0 ]]; then
          avg_lines=$((total_lines / java_files))
          echo "📊 Moyenne lignes par fichier: $avg_lines"
        fi
        
        echo ""
        echo "🏗️ Répartition par package:"
        find src -name "*.java" -exec dirname {} \; | sort | uniq -c | sort -nr | head -10
        
        echo ""
        echo "⚠️ Marqueurs de développement:"
        grep -r -n "TODO\|FIXME\|XXX" src/ || echo "✅ Aucun marqueur TODO/FIXME trouvé"

  # Job 6: Rapport final et déploiement conditionnel
  finalize:
    name: 📋 Finalisation
    runs-on: ubuntu-latest
    needs: [validate-project, build, integration-tests, security-scan, code-quality]
    if: always()

    steps:
    - name: 🔄 Checkout du code
      uses: actions/checkout@v4

    - name: 📊 Génération du rapport final
      run: |
        echo "# 🎯 Rapport CI/CD Nexus Plugin" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📋 Informations du Build" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.validate-project.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${GITHUB_SHA:0:8}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branche**: ${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
        echo "- **JAR**: ${{ needs.build.outputs.jar-name || 'Non généré' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Taille**: ${{ needs.build.outputs.jar-size || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 🎯 Résultats des Jobs" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Statut |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Validation | ${{ needs.validate-project.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔨 Build | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🛡️ Sécurité | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Qualité | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Déterminer le statut global
        if [[ "${{ needs.validate-project.result }}" == "success" && \
              "${{ needs.build.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "## 🎉 Build Réussi !" >> $GITHUB_STEP_SUMMARY
          echo "✅ Le plugin a passé tous les tests critiques et est prêt pour le déploiement." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Téléchargement" >> $GITHUB_STEP_SUMMARY
          echo "Le JAR compilé est disponible dans les artifacts de ce build." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Build Échoué" >> $GITHUB_STEP_SUMMARY
          echo "🔍 Vérifiez les logs des jobs échoués pour plus de détails." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Généré automatiquement par Heneria CI/CD*" >> $GITHUB_STEP_SUMMARY

    - name: 🚀 Notification de déploiement (si succès)
      if: >
        needs.validate-project.result == 'success' &&
        needs.build.result == 'success' &&
        needs.integration-tests.result == 'success' &&
        github.event.inputs.deploy == 'true'
      run: |
        echo "🚀 Le plugin est prêt pour le déploiement !"
        echo "📦 Artifact: ${{ needs.build.outputs.jar-name }}"
        echo "💾 Taille: ${{ needs.build.outputs.jar-size }}"
        echo ""
        echo "Pour déployer manuellement:"
        echo "1. Télécharger l'artifact depuis cette action"
        echo "2. L'uploader sur le serveur avec WinSCP ou le script deploy.sh"
        echo "3. Redémarrer le serveur Minecraft"

